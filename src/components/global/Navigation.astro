---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import { getLangFromUrl, getUrlWithoutLang, useTranslations, useTranslatedPath } from "@i18n/utils";

const isDev = import.meta.env.DEV;

const lang = getLangFromUrl(Astro.url);
const path = getUrlWithoutLang(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

let pages = [
	{
		title: "Home",
		url: "/",
	},
	{
		title: "About Us",
		url: "/about",
	},
	{
		title: "Projects",
		url: "/blog/",
	},
	{
		title: t("contact"),
		url: "/#contact",
	},
];

// if (isDev) {
// 	pages.push({
// 		title: "Overview",
// 		url: "/system/overview",
// 	});
// }

const { pathname } = Astro.url;
---

<header>
	<a href={translatePath("/")} aria-label="Home" class="logo absolute z-50 flex h-[4.5rem] items-center md:h-[5.9rem]">
		<img src="/herso-Logo.png" alt="Herso Logo" class="logo-img w-36" style="object-fit:contain; height: 4.25rem;" />
	</a>
	<div data-xdata="{ open: false }" class="navigation fixed right-0 top-0 z-50" data-xbind.class="{'w-full navbar-open': open}">
		<div class="ml-auto md:max-w-fit" data-xbind.class="{'max-w-3xl': open, 'max-w-[8rem]': !open }">
			<div class="mx-auto w-full">
				<div
					class="shadow-thick resizable nav-container squircle relative mx-auto flex w-full flex-col justify-center overflow-x-hidden bg-zinc-900 backdrop-blur-xl backdrop-filter md:flex-row-reverse">
					<div class="flex flex-row items-center justify-end md:hidden">
						<a class="px-3 py-[0.4rem] pl-4" href={translatePath("/#contact")} aria-label="Contact">
							<Icon class="text-white" name="octicon:mail-16" width="20" data-xbind.class="{'hidden': open}" />
						</a>
						<button
							data-xon.click="open = !open"
							data-xbind.style="{'padding-top': open ? '1rem' : '0.4rem'}"
							aria-label="Open navbar"
							class="inline-flex items-center justify-center px-3 py-[0.4rem] pr-4 text-white hover:text-blue-300 focus:text-white focus:outline-none">
							<svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
								<path
									data-xbind.class="{'hidden': open, 'inline-flex': !open }"
									class="inline-flex"
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M4 6h16M4 12h16M4 18h16">
								</path>
								<path
									data-xbind.class="{'hidden': !open, 'inline-flex': open }"
									class="hidden"
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M6 18L18 6M6 6l12 12">
								</path>
							</svg>
						</button>
					</div>
					<nav data-xbind.class="{'flex': open, 'hidden': !open}" class="hidden flex-grow flex-col justify-center py-12 md:flex md:py-0">
						<ul
							class="flex list-none flex-col items-end justify-center gap-2 px-2 text-center text-3xl md:flex-row md:items-center md:text-base">
							{
									pages.map((page, index) => {
										let linkId = undefined;
										if (page.title === "Projects") linkId = "nav-projects-link";
										if (page.url === "/#contact") linkId = "nav-contact-link";
										if (page.title === "About Us") linkId = "nav-about-link";
										return (
											<li data-cursor-hover style={`--index: ${index}`}>
												<a
													id={linkId}
													href={translatePath(page.url)}
													class={`inline-block cursor-pointer px-1 py-[0.33rem] ${
														page.url === pathname ||
														page.url === pathname.replace(/^\/it|\/$/, "") ||
														(page.url === "/blog" && (pathname.startsWith("/blog") || pathname.startsWith("/it/blog"))) ||
														(page.url === "/about" && (pathname.startsWith("/about") || pathname.startsWith("/it/about")))
															? "active"
															: ""
													}`}
												>
													<span class="menu-item-container inline-block">
														<span class="menu-item px-4 py-1 font-semibold uppercase tracking-wide text-zinc-400 hover:text-white focus:text-white focus:shadow-none focus:outline-none">
															{page.title}
														</span>
													</span>
												</a>
											</li>
										);
									})
								}
							<!-- <li>
								<a href={translatePath(path, `${lang === "it" ? "en" : "it"}`)} class="inline-block cursor-pointer px-1 py-[0.33rem]">
									<span class="menu-item-container inline-block">
										<span
											class="menu-item px-4 py-1 font-semibold uppercase tracking-wide text-zinc-400 hover:text-white focus:text-white focus:shadow-none focus:outline-none">
											{lang === "it" ? "en" : "it"}
										</span>
									</span>
								</a>
							</li> -->
						</ul>
					</nav>
				</div>
			</div>
		</div>
	</div>
</header>

<style>
	.navigation {
		mix-blend-mode: difference;
		transition: all 1.2s ease-in-out;
		position: fixed !important;
		top: 0 !important;
		right: 0 !important;
		z-index: 9999 !important;
		width: auto;
	}
	.navigation.navbar-open {
		mix-blend-mode: luminosity;
	}
	.navigation,
	.logo {
		padding: 1rem var(--base-padding-x);
	}
	@media (min-width: 768px) {
		.navigation,
		.logo {
			padding: 2rem var(--base-padding-x);
		}
	}
	
	header .navigation,
	.navigation,
	[data-navigation] {
		position: fixed !important;
		top: 0 !important;
		right: 0 !important;
		z-index: 9999 !important;
		left: auto !important;
		width: auto !important;
	}
	
	.nav-container {
		transition: all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}
	.resizable:before {
		content: "|";
		position: absolute;
		left: 0.4rem;
		top: 0.36rem;
		font-size: 12px;
		line-height: 23px;
		color: #8e8e8e;
		opacity: 0;
		text-shadow: 4px 0 #8e8e8e;
		transition: all 1.2s ease;
	}
	.collapsed .resizable:before {
		opacity: 1;
	}
	nav a .menu-item-container {
		border-radius: 0.45rem;
		transition: all 1.0s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}
	nav a.active .menu-item-container,
	nav a:hover .menu-item-container {
		transition: background-color 1.0s ease;
	}
	nav ul:not(.collapsed) a.active .menu-item-container {
		transition-duration: 0.8s;
		background: #aaa;
	}
	nav ul:not(.collapsed) a:hover .menu-item-container {
		background: #fff;
	}
	nav ul:not(.collapsed) a.active .menu-item-container .menu-item,
	nav ul:not(.collapsed) a:hover .menu-item-container .menu-item {
		color: #000;
	}
	nav ul.collapsed a.active .menu-item-container .menu-item,
	nav ul.collapsed a:hover .menu-item-container .menu-item {
		color: #fff;
	}
	.nav-container.collapsed {
		min-width: 125px;
		max-width: 200px;
		width: auto !important;
		transform: scale(0.95);
		transition: all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}
	
	nav ul.collapsed {
		justify-content: center !important;
		transform: translateX(0) !important;
		padding: 0 1rem;
		transition: all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}
	
	nav ul.collapsed li {
		flex: none;
		width: auto;
		transition: all 1.0s ease;
	}
	
	nav ul.collapsed .menu-item {
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
		max-width: 150px;
		transition: all 1.0s ease;
	}

	.nav-container:not(.collapsed) {
		width: auto !important;
		min-width: auto !important;
		max-width: none !important;
		transform: scale(1);
		transition: all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}
	nav ul:not(.collapsed) {
		transform: translateX(0) !important;
		justify-content: flex-end !important;
		transition: all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}
	nav ul:not(.collapsed) li {
		display: block !important;
		flex: none;
		width: auto;
		transition: all 1.0s ease;
	}
	.navigation:not(.collapsed) nav ul li {
		display: block !important;
		opacity: 1;
		transform: translateY(0);
		transition: all 1.0s ease;
	}
	
	nav ul li {
		transition: all 1.0s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}
	nav ul.collapsed li:not(.active) {
		opacity: 0;
		transform: translateY(-10px);
		transition: all 1.0s ease;
	}
	.navigation.scrolled {
		background: rgba(0, 0, 0, 0.1);
		backdrop-filter: blur(10px);
		transition: all 0.8s ease;
	}
	@keyframes slideInFromRight {
		from {
			opacity: 0;
			transform: translateX(20px);
		}
		to {
			opacity: 1;
			transform: translateX(0);
		}
	}
	nav ul:not(.collapsed) li {
		animation: slideInFromRight 0.6s ease forwards;
		animation-delay: calc(var(--index, 0) * 0.08s);
	}
</style>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	import { DrawSVGPlugin } from "gsap/DrawSVGPlugin";
	import { ScrollToPlugin } from "gsap/ScrollToPlugin";

	gsap.registerPlugin(DrawSVGPlugin, ScrollTrigger, ScrollToPlugin);

	function init() {
		gsap.timeline({
			defaults: {
				duration: 1,
				ease: "power2.out",
			},
		})
			.from(".logo-svg path", { drawSVG: 0 })
			.to(".logo-svg path", { fill: "#000", duration: 2 }, "<+=0.5");

		let isHoveringMenu = false;
		let menuCollapsed = false;

		const pageLinksUl = document.querySelector("header .nav-container nav ul");
		const navContainer = document.querySelector("header .nav-container");
		if (!pageLinksUl || !navContainer) {
			return;
		}

		let menuCollapseTl = gsap
			.timeline({
				defaults: {
					ease: "power2.inOut",
					duration: 1.2,
				},
				paused: true,
				onStart: () => {
					pageLinksUl.classList.add("collapsed");
					navContainer.classList.add("collapsed");
					hideInactiveLinks();
				},
				onReverseComplete: () => {
					pageLinksUl.classList.remove("collapsed");
					navContainer.classList.remove("collapsed");
					showAllLinks();
				}
			})
			.to("header .nav-container", { 
				width: () => {
					const activeLink = pageLinksUl.querySelector("a.active .menu-item");
					if (activeLink) {
						const textWidth = activeLink.textContent.length * 8;
						return Math.max(textWidth + 60, 125);
					}
					return 125;
				}
			})
			.to(
				pageLinksUl,
				{
					x: () => {
						return "0rem";
					},
				},
				"<",
			);

		function hideInactiveLinks() {
			if (!pageLinksUl) return;
			Array.from(pageLinksUl.children).forEach((li) => {
				const a = li.querySelector("a");
				const liElement = li as HTMLElement;
				if (a && !a.classList.contains("active")) {
					liElement.style.display = "none";
				}
			});
		}
		function showAllLinks() {
			if (!pageLinksUl) return;
			Array.from(pageLinksUl.children).forEach((li) => {
				const liElement = li as HTMLElement;
				liElement.style.display = "";
			});
		}
		const isTouchDevice = window.matchMedia("(hover: none)").matches;

		function expandMenu() {
			menuCollapseTl.reverse();
			pageLinksUl?.classList.remove("collapsed");
			navContainer?.classList.remove("collapsed");
			document.querySelector("header .navigation")?.classList.remove("collapsed");
			menuCollapsed = false;
			
			if (pageLinksUl) {
				gsap.set(pageLinksUl.children, { 
					opacity: 1, 
					y: 0,
					duration: 1.0,
					ease: "power2.out",
					stagger: 0.15
				});
			}
		}

		function collapseMenu() {
			if (window.scrollY > 200) {
				menuCollapseTl.play();
				pageLinksUl?.classList.add("collapsed");
				navContainer?.classList.add("collapsed");
				document.querySelector("header .navigation")?.classList.add("collapsed");
				menuCollapsed = true;
			}
		}

		function initMenuBehavior() {
			if (window.scrollY <= 200) {
				expandMenu();
			} else {
				collapseMenu();
			}

			function mouseEnterHandler() {
				isHoveringMenu = true;
				expandMenu();
			}

			function mouseLeaveHandler() {
				isHoveringMenu = false;
				if (window.scrollY > 200) {
					collapseMenu();
				}
			}

			function handleScroll() {
				if (window.scrollY > 200 && !isHoveringMenu && !menuCollapsed) {
					collapseMenu();
				} else if (window.scrollY <= 200 && menuCollapsed) {
					expandMenu();
				}
			}

			navContainer?.removeEventListener("mouseenter", mouseEnterHandler);
			navContainer?.addEventListener("mouseenter", mouseEnterHandler);

			navContainer?.removeEventListener("mouseleave", mouseLeaveHandler);
			navContainer?.addEventListener("mouseleave", mouseLeaveHandler);

			window?.removeEventListener("scroll", handleScroll);
			window?.addEventListener("scroll", handleScroll);
		}

		if (window.innerWidth >= 768 && !isTouchDevice) {
			initMenuBehavior();
		} else {
			expandMenu();
			window?.addEventListener("scroll", () => {
				if (window.scrollY > 200) {
					document.querySelector("header .navigation")?.classList.add("scrolled");
				} else {
					document.querySelector("header .navigation")?.classList.remove("scrolled");
				}
			});
		}
		var navProjects = document.getElementById("nav-projects-link");
		if (navProjects) {
			navProjects.addEventListener("click", function (e) {
				if (window.location.pathname === "/" || window.location.pathname === "/it/") {
					e.preventDefault();
					gsap.to(window, { duration: 0.5, scrollTo: "#projects" });
				}
			});
		}
		var navContact = document.getElementById("nav-contact-link");
		if (navContact) {
			navContact.addEventListener("click", function (e) {
				if (window.location.pathname === "/" || window.location.pathname === "/it/") {
					e.preventDefault();
					gsap.to(window, { duration: 0.5, scrollTo: "#contact" });
				}
			});
		}
		var navAbout = document.getElementById("nav-about-link");
		if (navAbout) {
			navAbout.addEventListener("click", function (e) {
				if (window.location.pathname === "/" || window.location.pathname === "/it/") {
					e.preventDefault();
					gsap.to(window, { duration: 0.5, scrollTo: "#about-us" });
				}
			});
		}
	}

	document.removeEventListener("DOMContentLoaded", init);
	document.addEventListener("DOMContentLoaded", init);
</script>
